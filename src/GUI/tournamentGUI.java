/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import bridgetournamentcontroller.BRC;
import dataManagment.DataCollector;
import bridgetournamentcontroller.TW;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import dataManagment.BoardData;
import dataManagment.DatabaseConnector;

/**
 *
 * @author uzivatel
 */
public class tournamentGUI extends javax.swing.JFrame {

  
DataCollector dc;

    public tournamentGUI() {
        initComponents();
        this.dc = bridgetournamentcontroller.BridgeTorunamentController.dc;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        tournamentName = new javax.swing.JTextField();
        openTournamentButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        tournamentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tournamentNameActionPerformed(evt);
            }
        });

        openTournamentButton.setText("Open");
        openTournamentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTournamentButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Mode: Pair match, MP scoring");

        jLabel1.setFont(new java.awt.Font("Cantarell", 0, 36)); // NOI18N
        jLabel1.setText("Tournament");

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(553, 553, 553)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(tournamentName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openTournamentButton)
                        .addGap(97, 97, 97)
                        .addComponent(jLabel2))
                    .addComponent(jLabel1))
                .addGap(71, 173, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tournamentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openTournamentButton)
                    .addComponent(jLabel2))
                .addGap(503, 503, 503)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openTournamentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTournamentButtonActionPerformed
        dc.collect("tournamentGUI", "tournamentNAME", tournamentName.getText());
        
        File tournamentDataFile = new File("tournaments/"+bridgetournamentcontroller.BridgeTorunamentController.vm.tournamentName);
        System.out.println("Opening tournament "+tournamentDataFile.getAbsolutePath());
        if(!tournamentDataFile.exists()) {
            dc.collect("tournamentGUI", "tournamentExists", "false");
            
            // create main tournament directory
            System.out.println("Creating tournament data file...");
            tournamentDataFile.mkdir();
            
            // write tournament settings file
            PrintWriter writer;
            try {
                writer = new PrintWriter(tournamentDataFile+"/"+tournamentName.getText()+"_settings.txt", "UTF-8");
                writer.println("tournamentNAME="+tournamentName.getText());
                   writer.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(tournamentGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(tournamentGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            // create directory for databases
            
            tournamentDataFile = new File("tournaments/"+bridgetournamentcontroller.BridgeTorunamentController.vm.tournamentName+"/databases");
            tournamentDataFile.mkdir();
            
            // create directory for output
            
            tournamentDataFile = new File("tournaments/"+bridgetournamentcontroller.BridgeTorunamentController.vm.tournamentName+"/output");
            tournamentDataFile.mkdir();
            
            // create directory for backup
            
            tournamentDataFile = new File("tournaments/"+bridgetournamentcontroller.BridgeTorunamentController.vm.tournamentName+"/backup");
            tournamentDataFile.mkdir();
            
            // create directory for settings
            
            tournamentDataFile = new File("tournaments/"+bridgetournamentcontroller.BridgeTorunamentController.vm.tournamentName+"/settings");
            tournamentDataFile.mkdir();

            System.out.println("Tournament directory created!");
        } else {
        dc.collect("tournamentGUI", "tournamentExists", "true");
        }
        
        
        this.dispose();
    }//GEN-LAST:event_openTournamentButtonActionPerformed

    private void tournamentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tournamentNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tournamentNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tournamentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tournamentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tournamentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tournamentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tournamentGUI().setVisible(true);
            }
        });
    }
    
                       


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton openTournamentButton;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JTextField tournamentName;
    // End of variables declaration//GEN-END:variables

}
