/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import bridgetournamentcontroller.BridgeTorunamentController;
import dataManagment.BMImputCreator;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import tournamentManagment.Movement;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import static java.nio.file.StandardCopyOption.*;
import java.nio.file.Files;
import java.util.Calendar;
import javax.swing.JOptionPane;

/**
 *
 * @author uzivatel
 */
public class movementGUI extends javax.swing.JFrame {

  
Movement m = new Movement();
BMImputCreator dm = new BMImputCreator();
    
    public movementGUI() {
        initComponents();
        
        if(BridgeTorunamentController.vm.tournamentName.equals("")) {
        //JOptionPane.showMessageDialog(null, "Warning: editing movement without tournament opened!");
        }            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        movementName = new javax.swing.JTextField();
        useButton = new javax.swing.JButton();
        createBM = new javax.swing.JButton();
        bmproaddress = new javax.swing.JTextField();
        restartBM = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        movementInUseLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        startHour = new javax.swing.JTextField();
        startMinute = new javax.swing.JTextField();
        startSecond = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        playTime = new javax.swing.JLabel();
        reopenBM = new javax.swing.JButton();
        updatebutton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        movementMenu = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        movementName.setText("Movement name");

        useButton.setText("Use");
        useButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useButtonActionPerformed(evt);
            }
        });

        createBM.setText("Create BMImput");
        createBM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBMActionPerformed(evt);
            }
        });

        bmproaddress.setText("C:\\Program Files\\Bridgemate Pro\\BMPro.exe");
        bmproaddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bmproaddressActionPerformed(evt);
            }
        });

        restartBM.setText("Start BMServer");
        restartBM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartBMActionPerformed(evt);
            }
        });

        jLabel1.setText("Movement in use:");

        movementInUseLabel.setText("none");

        jLabel2.setFont(new java.awt.Font("Cantarell", 0, 36)); // NOI18N
        jLabel2.setText("BridgeMate");

        jLabel3.setFont(new java.awt.Font("Cantarell", 0, 36)); // NOI18N
        jLabel3.setText("Movement");

        jLabel5.setText("Start time");

        startHour.setText("H");
        startHour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startHourActionPerformed(evt);
            }
        });

        startMinute.setText("M");

        startSecond.setText("S");

        jLabel6.setText("Play time");

        playTime.setText("to be calculated");

        reopenBM.setText("Reopen BMImput");
        reopenBM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reopenBMActionPerformed(evt);
            }
        });

        updatebutton.setText("Update");
        updatebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebuttonActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("Actions");

        movementMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, 0));
        movementMenu.setMnemonic('o');
        movementMenu.setText("Movement");
        movementMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movementMenuActionPerformed(evt);
            }
        });
        fileMenu.add(movementMenu);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(553, 553, 553)
                        .addComponent(jLabel4))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(movementInUseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(movementName, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playTime, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updatebutton)
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(createBM)
                                            .addComponent(restartBM))
                                        .addGap(18, 18, 18)
                                        .addComponent(reopenBM))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(bmproaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(159, 159, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(288, 288, 288))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(startMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(243, 243, 243))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jLabel3)
                    .addContainerGap(746, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(movementName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(useButton)
                            .addComponent(createBM)
                            .addComponent(reopenBM)
                            .addComponent(updatebutton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(movementInUseLabel)
                            .addComponent(restartBM))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bmproaddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(playTime)))
                .addGap(174, 174, 174)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(206, 206, 206)
                .addComponent(jLabel4)
                .addContainerGap(92, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jLabel3)
                    .addContainerGap(602, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void movementMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movementMenuActionPerformed
    
    }//GEN-LAST:event_movementMenuActionPerformed

    private void useButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useButtonActionPerformed
    if(BridgeTorunamentController.vm.tournamentName.equals("")) {
        JOptionPane.showMessageDialog(null, "Warning: editing movement without tournament opened!");
        return;
        }
        
        
        try {
    
        Files.copy(new File("./movements/"+movementName.getText()+".txt").toPath(), new File("tournaments/"+bridgetournamentcontroller.BridgeTorunamentController.vm.tournamentName+"/databases/movement.dat").toPath(), REPLACE_EXISTING);
        
        m.readMovement("tournaments/"+bridgetournamentcontroller.BridgeTorunamentController.vm.tournamentName+"/databases/movement.dat");
        BridgeTorunamentController.dc.mailObject(m, "MOVEMENT");
        BridgeTorunamentController.dc.collect("movementGUI", "movementUpdated", "true");

        System.out.println("Movement updated...");
        
    } catch (IOException ex) {
        Logger.getLogger(movementGUI.class.getName()).log(Level.SEVERE, null, ex);
    }
        updateTimeManager();
    }//GEN-LAST:event_useButtonActionPerformed

    private void createBMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBMActionPerformed
       
        int dialogResult = JOptionPane.showConfirmDialog (null, "Do you want to overwrite actual BMImput (and so delete board results on BMServer)?","Overwriting BMImput",JOptionPane.YES_NO_OPTION);
          if(dialogResult == JOptionPane.YES_OPTION){
              
              // backup old BMImput file
              
              File f= new File("tournaments/"+bridgetournamentcontroller.BridgeTorunamentController.vm.tournamentName+"/databases/BMImput.bws");
              if(f.exists()) {
                  try {
                      Files.copy(new File("tournaments/"+bridgetournamentcontroller.BridgeTorunamentController.vm.tournamentName+"/databases/BMImput.bws").toPath(), new File("tournaments/"+bridgetournamentcontroller.BridgeTorunamentController.vm.tournamentName+"/backup/BMImput"+(Calendar.DATE)+"d"+(Calendar.MONTH)+"d"+(Calendar.YEAR)+"d"+(Calendar.HOUR)+"dd"+(Calendar.MINUTE)+".bws").toPath(), REPLACE_EXISTING);
                  } catch (IOException ex) {
                      Logger.getLogger(movementGUI.class.getName()).log(Level.SEVERE, null, ex);
                  }
              }
              
              
              JOptionPane.showMessageDialog(null, "Creating new BMImput, old one has been backuped");
             BMImputCreator dm = new BMImputCreator();
            try {
            dm.createDatabase(m);
            } catch (IOException ex) {
            Logger.getLogger(movementGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
            Logger.getLogger(movementGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            }  
          
          JOptionPane.showMessageDialog(null, "New BMImput was created");
    }//GEN-LAST:event_createBMActionPerformed

    private void bmproaddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bmproaddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bmproaddressActionPerformed

    private void restartBMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartBMActionPerformed
    try {
        Runtime.getRuntime().exec(bmproaddress.getText() +" /f:["+dm.databaseName+"] /s");
    } catch (IOException ex) {
        Logger.getLogger(movementGUI.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_restartBMActionPerformed

    private void reopenBMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reopenBMActionPerformed
       BMImputCreator dm = new BMImputCreator();
       dm.useDatabase();
       JOptionPane.showMessageDialog(null, "Updated");
        
    }//GEN-LAST:event_reopenBMActionPerformed

    private void updatebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebuttonActionPerformed
        try(BufferedReader br = new BufferedReader(new FileReader("tournaments/"+bridgetournamentcontroller.BridgeTorunamentController.vm.tournamentName+"/databases/movement.dat"))) {
    for(String line; (line = br.readLine()) != null; ) {

        if(line.startsWith("#NAME=")) {
            // movement exists ->> inform user about situation, prepare MOVEMENT class for futher change
            
            movementInUseLabel.setText(line.substring(6));
            m.readMovement("tournaments/"+bridgetournamentcontroller.BridgeTorunamentController.vm.tournamentName+"/databases/movement.dat");
            BridgeTorunamentController.dc.collect("movementGUI", "movementUpdated", "true");
            BridgeTorunamentController.dc.mailObject(m, "MOVEMENT");
        }
      
    }
    }       catch (IOException ex) {
                Logger.getLogger(movementGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        updateTimeManager();
        JOptionPane.showMessageDialog(null, "Updated");
    }//GEN-LAST:event_updatebuttonActionPerformed

    private void startHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startHourActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startHourActionPerformed

    
    public void updateTimeManager() {
        // check for weird movement - board 1 no expected results
        if(m.expectedBoardResults[1] == 0) {
        JOptionPane.showMessageDialog(null, "Error in movement (timeManager) - board 1 has 0 expected results.");
        return;
        }
        
    int rounds = m.rounds;
    int boardsPerRound = m.expectedBoardResults[1];
    
    int playTime = boardsPerRound * bridgetournamentcontroller.BridgeTorunamentController.vm.minutesPerBoard * rounds;
    if((double)playTime/60 < 1) this.playTime.setText(playTime + " minutes");
    else this.playTime.setText((double) playTime/60 + " hours");
    
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(movementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(movementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(movementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(movementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new movementGUI().setVisible(true);
            }
        });
    }
    
                       


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JTextField bmproaddress;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JButton createBM;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel movementInUseLabel;
    private javax.swing.JMenuItem movementMenu;
    private javax.swing.JTextField movementName;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JLabel playTime;
    private javax.swing.JButton reopenBM;
    private javax.swing.JButton restartBM;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTextField startHour;
    private javax.swing.JTextField startMinute;
    private javax.swing.JTextField startSecond;
    private javax.swing.JButton updatebutton;
    private javax.swing.JButton useButton;
    // End of variables declaration//GEN-END:variables

}
